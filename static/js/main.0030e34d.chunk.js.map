{"version":3,"sources":["App.js","index.js"],"names":["App","useState","latest","setLatest","results","setResults","searchCountries","setSearchCountries","useEffect","axios","all","get","then","responseArr","data","catch","err","console","log","lastUpdated","Date","parseInt","updated","toString","countries","filter","item","country","includes","map","i","Card","key","bg","text","className","style","margin","Img","varian","src","countryInfo","flag","Body","Title","Text","cases","deaths","recovered","todayCases","todayDeaths","active","critical","textAlign","CardDeck","Footer","Form","Group","controlId","Control","type","placeholder","onChange","e","target","value","queries","columns","query","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0030e34d.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport CardDeck from \"react-bootstrap/CardDeck\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport axios from \"axios\";\nimport Columns from \"react-columns\";\nimport Form from \"react-bootstrap/Form\";\n\nfunction App() {\n  const [latest, setLatest] = useState([]);\n  const [results, setResults] = useState([]);\n  const [searchCountries, setSearchCountries] = useState(\"\");\n\n  useEffect(() => {\n      axios\n      .all([\n        axios.get(\"https://corona.lmao.ninja/all\"),\n        axios.get(\"https://corona.lmao.ninja/countries\")\n      ])\n      .then(responseArr => {\n        setLatest(responseArr[0].data);\n        setResults(responseArr[1].data);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }, []);\n\n\n  const date = new Date(parseInt(latest.updated));\n  const lastUpdated = date.toString();\n\n  const filterCountries = results.filter(item => {\n    return searchCountries !== \"\" ? item.country.includes(searchCountries) : item;\n  });\n\n  const countries = filterCountries.map((data, i) => {\n    return (\n      <Card\n        key={i}\n        bg=\"light\"\n        text=\"dark\"\n        className=\"text-center\"\n        style={{ margin: \"10px\" }}\n      >\n        <Card.Img varian=\"top\" src={data.countryInfo.flag} />\n        <Card.Body>\n          <Card.Title>{data.country}</Card.Title>\n          <Card.Text>Cases {data.cases}</Card.Text>\n          <Card.Text>Deaths {data.deaths}</Card.Text>\n          <Card.Text>Recovered {data.recovered}</Card.Text>\n          <Card.Text>Today's cases {data.todayCases}</Card.Text>\n          <Card.Text>Today's deaths {data.todayDeaths}</Card.Text>\n          <Card.Text>Active {data.active}</Card.Text>\n          <Card.Text>Critical {data.critical}</Card.Text>\n        </Card.Body>\n      </Card>\n    );\n  });\n\n  var queries = [{\n    columns: 2,\n    query: \"min-width: 500px\"\n  }, {\n    columns: 3,\n    query: \"min-width: 1000px\"\n  }];\n\n  return (\n    <div>\n      <br />\n      <h2 style={{ textAlign: \"center\" }}>Covid-19 Live Stats</h2>\n      <br />\n      <CardDeck>\n        {/* Cases globally */}\n        <Card bg=\"secondary\" text=\"white\" className=\"text-center\" style={{ margin: \"10px\" }}>\n          <Card.Body>\n            <Card.Title>Cases</Card.Title>\n            <Card.Text>{latest.cases}</Card.Text>\n          </Card.Body>\n          <Card.Footer>\n            <small>Last updated {lastUpdated}</small>\n          </Card.Footer>\n        </Card>\n\n        {/* Deaths globally */}\n        <Card bg=\"danger\" text={\"white\"} className=\"text-center\" style={{ margin: \"10px\" }}>\n          <Card.Body>\n            <Card.Title>Deaths</Card.Title>\n            <Card.Text>{latest.deaths}</Card.Text>\n          </Card.Body>\n          <Card.Footer>\n            <small>Last updated {lastUpdated}</small>\n          </Card.Footer>\n        </Card>\n\n        {/* Recovered globally */}\n        <Card bg=\"success\" text={\"white\"} className=\"text-center\" style={{ margin: \"10px\" }}>\n          <Card.Body>\n            <Card.Title>Recovered</Card.Title>\n            <Card.Text>{latest.recovered}</Card.Text>\n          </Card.Body>\n          <Card.Footer>\n            <small>Last updated {lastUpdated}</small>\n          </Card.Footer>\n        </Card>\n      </CardDeck>\n\n      <br />\n      {/* Form for searching a specific country */}\n      <Form>\n        <Form.Group controlId=\"formGroupSearch\">\n          <Form.Control type=\"text\" placeholder=\"Search a country\" onChange={e => setSearchCountries(e.target.value)}></Form.Control>\n        </Form.Group>\n      </Form>\n\n      {/* Column the countries due size of screen */}\n      <Columns queries={ queries }>\n        {countries}\n      </Columns>\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}